
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilers;

import java_cup.runtime.*;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import Syntax.*;
import Lexer.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\006\000\002\002\004\000\002\027" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\026\003\000\002\004\004\000\002\004\002\000" +
    "\002\005\005\000\002\030\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\006\000\002\007\004\000\002\010\004" +
    "\000\002\010\002\000\002\031\003\000\002\011\005\000" +
    "\002\011\003\000\002\012\010\000\002\012\007\000\002" +
    "\032\003\000\002\013\004\000\002\013\002\000\002\033" +
    "\003\000\002\014\007\000\002\014\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\006\000" +
    "\002\017\005\000\002\017\005\000\002\017\006\000\002" +
    "\017\007\000\002\017\006\000\002\017\012\000\002\017" +
    "\010\000\002\017\010\000\002\034\003\000\002\020\005" +
    "\000\002\020\003\000\002\021\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\022\004\000\002\022\004\000\002\022\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\004\005\001\002\000\004\002\201\001" +
    "\002\000\020\005\ufffc\007\007\010\010\011\013\012\012" +
    "\013\020\015\017\001\002\000\004\052\171\001\002\000" +
    "\004\052\ufff6\001\002\000\004\052\ufff5\001\002\000\020" +
    "\005\ufffc\007\007\010\010\011\013\012\012\013\020\015" +
    "\017\001\002\000\004\052\ufff3\001\002\000\004\052\ufff4" +
    "\001\002\000\020\005\ufffc\007\007\010\010\011\013\012" +
    "\012\013\020\015\017\001\002\000\004\005\uffff\001\002" +
    "\000\004\005\164\001\002\000\004\052\021\001\002\000" +
    "\004\052\ufff2\001\002\000\004\016\022\001\002\000\012" +
    "\017\031\047\024\050\023\051\027\001\002\000\014\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\001\002\000\014" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\001\002\000" +
    "\004\017\162\001\002\000\014\007\007\010\010\011\013" +
    "\012\012\013\020\001\002\000\014\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\001\002\000\004\017\uffe5\001\002" +
    "\000\004\020\032\001\002\000\050\007\007\010\010\011" +
    "\013\012\012\013\020\016\uffe6\021\uffe6\025\uffe6\031\uffe6" +
    "\033\uffe6\043\uffe6\045\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\001\002\000\020\005\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\001" +
    "\002\000\036\016\063\021\ufff9\025\060\031\052\033\044" +
    "\043\045\045\043\052\054\053\055\054\042\055\064\056" +
    "\040\057\047\060\056\001\002\000\036\016\uffe8\021\uffe8" +
    "\025\uffe8\031\uffe8\033\uffe8\043\uffe8\045\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\001\002" +
    "\000\050\007\007\010\010\011\013\012\012\013\020\016" +
    "\uffe6\021\uffe6\025\uffe6\031\uffe6\033\uffe6\043\uffe6\045\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\001\002\000\036\016\uffe7\021\uffe7\025\uffe7\031\uffe7" +
    "\033\uffe7\043\uffe7\045\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\001\002\000\040\006\uffc6" +
    "\014\uffc6\017\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6" +
    "\045\uffc6\001\002\000\040\002\ufff9\016\063\021\ufff9\025" +
    "\060\031\052\033\044\043\045\045\043\052\054\053\055" +
    "\054\042\055\064\056\040\057\047\060\056\001\002\000" +
    "\040\006\uffc7\014\uffc7\017\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\044\uffc7\045\uffc7\001\002\000\040\006\uffcf\014\uffcf" +
    "\017\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf\045\uffcf" +
    "\001\002\000\004\016\150\001\002\000\030\016\063\025" +
    "\060\043\045\045\043\052\066\053\055\054\042\055\064" +
    "\056\040\057\047\060\056\001\002\000\006\002\ufffb\021" +
    "\ufffb\001\002\000\040\006\uffcb\014\uffcb\017\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\044\uffcb\045\uffcb\001\002\000\004" +
    "\022\145\001\002\000\006\017\uffd6\023\uffd6\001\002\000" +
    "\004\016\133\001\002\000\036\014\131\017\uffd4\023\uffd4" +
    "\024\075\025\067\026\102\027\100\036\101\037\072\040" +
    "\104\041\077\042\076\044\070\045\105\001\002\000\042" +
    "\014\115\016\116\022\uffeb\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\117\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\044\uffc9\045\uffc9\001\002\000\040\006\uffc8\014" +
    "\uffc8\017\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\044\uffc8\045" +
    "\uffc8\001\002\000\040\006\uffca\014\uffca\017\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\044\uffca\045\uffca\001\002\000\004" +
    "\021\114\001\002\000\030\016\063\025\060\043\045\045" +
    "\043\052\066\053\055\054\042\055\064\056\040\057\047" +
    "\060\056\001\002\000\004\022\uffed\001\002\000\004\023" +
    "\111\001\002\000\030\016\063\025\060\043\045\045\043" +
    "\052\066\053\055\054\042\055\064\056\040\057\047\060" +
    "\056\001\002\000\040\006\uffc5\014\uffc5\017\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\001\002\000\032" +
    "\017\103\024\075\025\067\026\102\027\100\036\101\037" +
    "\072\040\104\041\077\042\076\044\070\045\105\001\002" +
    "\000\040\006\uffc9\014\uffc9\017\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\044\uffc9\045\uffc9\001\002\000\030\016\uffc3\025" +
    "\uffc3\043\uffc3\045\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\001\002\000\030\016\uffc0\025" +
    "\uffc0\043\uffc0\045\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\001\002\000\030\016\063\025" +
    "\060\043\045\045\043\052\066\053\055\054\042\055\064" +
    "\056\040\057\047\060\056\001\002\000\030\016\uffbd\025" +
    "\uffbd\043\uffbd\045\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\001\002\000\030\016\063\025" +
    "\060\043\045\045\043\052\066\053\055\054\042\055\064" +
    "\056\040\057\047\060\056\001\002\000\030\016\063\025" +
    "\060\043\045\045\043\052\066\053\055\054\042\055\064" +
    "\056\040\057\047\060\056\001\002\000\030\016\uffc4\025" +
    "\uffc4\043\uffc4\045\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\001\002\000\030\016\uffba\025" +
    "\uffba\043\uffba\045\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\001\002\000\030\016\uffbb\025" +
    "\uffbb\043\uffbb\045\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\001\002\000\030\016\uffc1\025" +
    "\uffc1\043\uffc1\045\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\001\002\000\030\016\uffbe\025" +
    "\uffbe\043\uffbe\045\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\060\uffbe\001\002\000\030\016\uffc2\025" +
    "\uffc2\043\uffc2\045\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\001\002\000\040\006\uffcc\014" +
    "\uffcc\017\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\044\uffcc\045" +
    "\uffcc\001\002\000\030\016\uffbc\025\uffbc\043\uffbc\045\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\001\002\000\030\016\uffbf\025\uffbf\043\uffbf\045\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\001\002\000\040\006\uffd0\014\uffd0\017\uffd0\023\uffd0" +
    "\024\075\025\067\026\102\027\100\036\101\037\072\040" +
    "\104\041\077\042\076\044\uffd0\045\uffd0\001\002\000\040" +
    "\006\uffd2\014\uffd2\017\uffd2\023\uffd2\024\075\025\067\026" +
    "\102\027\100\036\101\037\072\040\104\041\077\042\076" +
    "\044\070\045\105\001\002\000\040\006\uffd1\014\uffd1\017" +
    "\uffd1\023\uffd1\024\075\025\067\026\102\027\100\036\101" +
    "\037\072\040\104\041\077\042\076\044\070\045\105\001" +
    "\002\000\004\006\112\001\002\000\040\002\uffdd\016\uffdd" +
    "\021\uffdd\025\uffdd\031\uffdd\033\uffdd\043\uffdd\045\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\001\002\000\040\006\uffce\014\uffce\017\uffce\023\uffce\024" +
    "\075\025\067\026\102\027\100\036\101\037\072\040\104" +
    "\041\077\042\076\044\070\045\105\001\002\000\020\005" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf" +
    "\001\002\000\004\052\127\001\002\000\032\016\063\017" +
    "\123\025\060\043\045\045\043\052\066\053\055\054\042" +
    "\055\064\056\040\057\047\060\056\001\002\000\030\016" +
    "\063\025\060\043\045\045\043\052\066\053\055\054\042" +
    "\055\064\056\040\057\047\060\056\001\002\000\032\006" +
    "\121\024\075\025\067\026\102\027\100\036\101\037\072" +
    "\040\104\041\077\042\076\044\070\045\105\001\002\000" +
    "\040\002\uffdc\016\uffdc\021\uffdc\025\uffdc\031\uffdc\033\uffdc" +
    "\043\uffdc\045\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\001\002\000\004\017\125\001\002" +
    "\000\004\006\124\001\002\000\040\002\uffda\016\uffda\021" +
    "\uffda\025\uffda\031\uffda\033\uffda\043\uffda\045\uffda\052\uffda" +
    "\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\001" +
    "\002\000\004\006\126\001\002\000\040\002\uffdb\016\uffdb" +
    "\021\uffdb\025\uffdb\031\uffdb\033\uffdb\043\uffdb\045\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb" +
    "\001\002\000\006\014\115\022\uffeb\001\002\000\004\022" +
    "\uffec\001\002\000\030\016\063\025\060\043\045\045\043" +
    "\052\066\053\055\054\042\055\064\056\040\057\047\060" +
    "\056\001\002\000\006\017\uffd5\023\uffd5\001\002\000\030" +
    "\016\063\025\060\043\045\045\043\052\066\053\055\054" +
    "\042\055\064\056\040\057\047\060\056\001\002\000\032" +
    "\017\135\024\075\025\067\026\102\027\100\036\101\037" +
    "\072\040\104\041\077\042\076\044\070\045\105\001\002" +
    "\000\004\032\136\001\002\000\004\020\137\001\002\000" +
    "\036\016\063\021\ufff9\025\060\031\052\033\044\043\045" +
    "\045\043\052\054\053\055\054\042\055\064\056\040\057" +
    "\047\060\056\001\002\000\042\002\uffd8\016\uffd8\021\uffd8" +
    "\025\uffd8\031\uffd8\033\uffd8\035\141\043\uffd8\045\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\001\002\000\004\020\137\001\002\000\040\002\uffd9\016" +
    "\uffd9\021\uffd9\025\uffd9\031\uffd9\033\uffd9\043\uffd9\045\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\001\002\000\004\021\144\001\002\000\042\002\uffd3" +
    "\016\uffd3\021\uffd3\025\uffd3\031\uffd3\033\uffd3\035\uffd3\043" +
    "\uffd3\045\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\001\002\000\004\006\146\001\002\000" +
    "\040\002\uffde\016\uffde\021\uffde\025\uffde\031\uffde\033\uffde" +
    "\043\uffde\045\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\001\002\000\040\006\uffcd\014\uffcd" +
    "\017\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\036" +
    "\101\037\072\040\104\041\077\042\076\044\uffcd\045\uffcd" +
    "\001\002\000\030\016\063\025\060\043\045\045\043\052" +
    "\066\053\055\054\042\055\064\056\040\057\047\060\056" +
    "\001\002\000\032\017\152\024\075\025\067\026\102\027" +
    "\100\036\101\037\072\040\104\041\077\042\076\044\070" +
    "\045\105\001\002\000\004\034\153\001\002\000\004\020" +
    "\137\001\002\000\040\002\uffd7\016\uffd7\021\uffd7\025\uffd7" +
    "\031\uffd7\033\uffd7\043\uffd7\045\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\001\002\000\006" +
    "\002\ufffa\021\ufffa\001\002\000\004\052\157\001\002\000" +
    "\006\014\160\017\uffe3\001\002\000\010\047\024\050\023" +
    "\051\027\001\002\000\004\017\uffe4\001\002\000\004\020" +
    "\032\001\002\000\020\005\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\015\uffea\001\002\000\036\002\ufff9\016" +
    "\063\025\060\031\052\033\044\043\045\045\043\052\054" +
    "\053\055\054\042\055\064\056\040\057\047\060\056\001" +
    "\002\000\004\002\001\001\002\000\004\005\ufffe\001\002" +
    "\000\004\005\ufffd\001\002\000\004\006\ufff7\001\002\000" +
    "\010\006\uffee\014\uffee\030\175\001\002\000\004\006\173" +
    "\001\002\000\054\005\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\015\ufff8\016\ufff8\021\ufff8\025\ufff8\031\ufff8" +
    "\033\ufff8\043\ufff8\045\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\060\ufff8\001\002\000\006\006\ufff0" +
    "\014\177\001\002\000\030\016\063\025\060\043\045\045" +
    "\043\052\066\053\055\054\042\055\064\056\040\057\047" +
    "\060\056\001\002\000\034\006\uffef\014\uffef\024\075\025" +
    "\067\026\102\027\100\036\101\037\072\040\104\041\077" +
    "\042\076\044\070\045\105\001\002\000\004\052\171\001" +
    "\002\000\004\006\ufff1\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\014\005\013\006\005\012\010\027\015\001\001" +
    "\000\006\007\167\030\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\166\005\013\006\005\012\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\165\005\013\006\005\012\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\027\015\025\033\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\032\001\001\000\012\005\035\006\005\013" +
    "\034\032\033\001\001\000\002\001\001\000\022\004\045" +
    "\011\060\017\040\020\050\022\052\026\056\031\047\034" +
    "\061\001\001\000\002\001\001\000\010\005\035\006\005" +
    "\013\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\154\011\060\017\040\020\050\022\052\031\047" +
    "\034\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\072\024\070\025\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\064\001\001\000\002\001" +
    "\001\000\010\023\072\024\070\025\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\107\001\001\000\002\001\001\000\004\022\106\001\001" +
    "\000\004\022\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\072\024\070\025\073\001\001" +
    "\000\010\023\072\024\070\025\073\001\001\000\010\023" +
    "\072\024\070\025\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\072\024\070\025\073\001\001\000" +
    "\002\001\001\000\004\011\127\001\001\000\010\020\050" +
    "\022\052\034\121\001\001\000\004\022\117\001\001\000" +
    "\010\023\072\024\070\025\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\131\022\052\001\001\000\002\001" +
    "\001\000\004\022\133\001\001\000\010\023\072\024\070" +
    "\025\073\001\001\000\002\001\001\000\004\021\137\001" +
    "\001\000\022\004\045\011\060\017\040\020\050\022\052" +
    "\026\142\031\047\034\061\001\001\000\002\001\001\000" +
    "\004\021\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\072\024\070\025\073\001\001\000\004\022\150" +
    "\001\001\000\010\023\072\024\070\025\073\001\001\000" +
    "\002\001\001\000\004\021\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\160\015\025\001\001\000\002\001\001\000\004" +
    "\016\162\001\001\000\002\001\001\000\022\004\045\011" +
    "\060\017\040\020\050\022\052\026\164\031\047\034\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\175\001\001\000\010\023\072\024\070\025\073\001\001" +
    "\000\004\007\177\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

	/*-- Type Def --*/
	private String type= "";
	
	/*-- Definition NodeOp --*/
	NodeOp nArgsOp = new ArgsOp("ArgsOp");
	NodeOp nParDecls = new ParDeclOp("ParDeclsOp");
	NodeOp nVarDecls = new VarDeclOp("VarDeclsOp");
	NodeOp nVars = new NodeOp("VarsOp");
	NodeOp nVarDeclsInit = new NodeOp("VarDeclsInitOp");
	NodeOp nStatements = new NodeOp("StatementsOp");
	NodeOp nDecls = new NodeOp("DeclsOp");
	
	
	Lexer lexer;
	public Parser(Lexer lexer){
	    super(lexer);
	    this.lexer = lexer;
    }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD DeclsA START StatementsA 
            {
              ScopeNode RESULT =null;
		int Decls1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Decls1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodeOp Decls1 = (NodeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Statments1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Statments1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodeOp Statments1 = (NodeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
RESULT = new ProgramOp("ProgramOp", Decls1, Statments1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ScopeNode start_val = (ScopeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclsA ::= Decls 
            {
              NodeOp RESULT =null;
		 nDecls.reverseList(); RESULT = nDecls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclsA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Var_decl Decls 
            {
              Node RESULT =null;
		int VarDeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int VarDeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node VarDe = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node decls = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		nDecls.addNode(VarDe);
		//RESULT = nDecls; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= Def_decl Decls 
            {
              Node RESULT =null;
		int DefDeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int DefDeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node DefDe = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node decls = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		nDecls.addNode(DefDe);
		//RESULT = nDecls; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decls ::= 
            {
              Node RESULT =null;
		 
		//RESULT = null;
		nDecls = new NodeOp("DeclsOp");
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // StatementsA ::= Statements 
            {
              NodeOp RESULT =null;
		 nStatements.reverseList(); RESULT = nStatements; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementsA",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statements ::= Stat Statements 
            {
              Node RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node stat = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node statements = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 nStatements.addNode(stat);
				//RESULT = nStatements; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statements ::= 
            {
              Node RESULT =null;
		 
				//RESULT = null;
				nStatements = new NodeOp("StatementsOp");
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Var_decl ::= Type Var_decls_initA SEMI 
            {
              Node RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node type = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int VarDeInleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int VarDeInright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node VarDeIn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclOp("VarDeclOp", type, VarDeIn); 
													nVarDeclsInit = new NodeOp("VarDeclsInitOp"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Var_decls_initA ::= Var_decls_init 
            {
              Node RESULT =null;
		 nVarDeclsInit.reverseList(); RESULT = nVarDeclsInit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls_initA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= INT 
            {
              Node RESULT =null;
		 RESULT = new NodeLeaf("INT",null, "INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= BOOL 
            {
              Node RESULT =null;
		 RESULT = new NodeLeaf("BOOL",null, "BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= DOUBLE 
            {
              Node RESULT =null;
		 RESULT = new NodeLeaf("DOUBLE",null, "DOUBLE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= STRING 
            {
              Node RESULT =null;
		 RESULT = new NodeLeaf("STRING",null, "STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= CHAR 
            {
              Node RESULT =null;
		 RESULT = new NodeLeaf("CHAR",null, "CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_decls_init ::= ID Var_init_value COMMA Var_decls_init 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int varInValeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varInVaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node varInVa = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int VarDeInleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VarDeInright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node VarDeIn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				if(varInVa != null){ nVarDeclsInit.addNode(varInVa); }
				nVarDeclsInit.addNode(new NodeLeaf("IDdecl",SymbolTable.lookup(id).value.toString(),""));
				   //RESULT = nVarDeclsInit;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls_init",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Var_decls_init ::= ID Var_init_value 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varInValeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varInVaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node varInVa = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
 				if(varInVa != null){ nVarDeclsInit.addNode(varInVa); }
 				nVarDeclsInit.addNode(new NodeLeaf("IDdecl",SymbolTable.lookup(id).value.toString(), ""));
 				   //RESULT = nVarDeclsInit;
 				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls_init",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Var_init_value ::= ASSIGN Expr 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new VarInitValueOp("VarInitValueOp", new NodeOp("AssignVal"), expr ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Var_init_value ::= 
            {
              Node RESULT =null;
		RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_init_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarsA ::= Vars 
            {
              Node RESULT =null;
		 nVars.reverseList(); RESULT = nVars; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsA",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Vars ::= ID COMMA Vars 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vars = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			nVars.addNode(new NodeLeaf("ID",SymbolTable.lookup(id).value.toString(), ""));
			//RESULT = nVars;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Vars ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 nVars.addNode(new NodeLeaf("ID",SymbolTable.lookup(id).value.toString(), ""));
 				//RESULT = nVars;
 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Def_decl ::= DEF ID LPAR Par_declsA RPAR Body 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node parDecls = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node body = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NodeOp("DefDeclsOp", new NodeLeaf("IDdefdecl",SymbolTable.lookup(id).value.toString(), ""), parDecls, body); 			
															nParDecls = new ParDeclOp("ParDeclsOp");
															 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_decl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Def_decl ::= DEF ID LPAR RPAR Body 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node body = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NodeOp("DefDeclsOp", new NodeLeaf("IDdefdecl",SymbolTable.lookup(id).value.toString(), ""), body);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_decl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Var_declsA ::= Var_decls 
            {
              Node RESULT =null;
		 nVarDecls.reverseList(); RESULT=nVarDecls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_declsA",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Var_decls ::= Var_decl Var_decls 
            {
              Node RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node varDecl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node varDecls = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				nVarDecls.addNode(varDecl);
				//RESULT = nVarDecls;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Var_decls ::= 
            {
              Node RESULT =null;
		 //RESULT = null; 
			nVarDecls = new NodeOp("VarDeclsOp"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Par_declsA ::= Par_decls 
            {
              Node RESULT =null;
		 nParDecls.reverseList(); RESULT=nParDecls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_declsA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Par_decls ::= Par_type Type ID COMMA Par_decls 
            {
              Node RESULT =null;
		int pTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node pType = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node type = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pDeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pDeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node pDecls = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			nParDecls.addNode(new NodeLeaf("IDpardecl",SymbolTable.lookup(id).value.toString(), ""));
			nParDecls.addNode(type);
			nParDecls.addNode(pType);
			//RESULT = nParDecls;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Par_decls ::= Par_type Type ID 
            {
              Node RESULT =null;
		int pTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node pType = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node type = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			nParDecls.addNode(new NodeLeaf("IDpardecl",SymbolTable.lookup(id).value.toString(), ""));
			nParDecls.addNode(type);
			nParDecls.addNode(pType);
			//RESULT = nParDecls;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Par_type ::= IN 
            {
              Node RESULT =null;
		 RESULT = new NodeLeaf("IN",null,"IN"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Par_type ::= OUT 
            {
              Node RESULT =null;
		 RESULT = new NodeLeaf("OUT",null,"OUT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Par_type ::= INOUT 
            {
              Node RESULT =null;
		 RESULT = new NodeLeaf("INOUT",null,"INOUT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Body ::= LGPAR Var_declsA StatementsA RGPAR 
            {
              Node RESULT =null;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node varDecls = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeOp statements = (NodeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BodyOp("BodyOp", varDecls, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= VarsA READ SEMI 
            {
              Node RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node var = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ReadOp("ReadOp", var); 
								nVars = new VarsOp("VarsOp"); 
							 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ArgsA WRITE SEMI 
            {
              Node RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node args = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WriteOp("WriteOp", args);		
 								nArgsOp = new ArgsOp("ArgsOp");
 							   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= ID ASSIGN Expr SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignOp("AssignOp", new NodeLeaf("IDop",SymbolTable.lookup(id).value.toString(), ""), expr);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= ID LPAR ArgsA RPAR SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node args = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new CallOp("CallOp", new NodeLeaf("ID",SymbolTable.lookup(id).value.toString(), ""), args); 
 										nArgsOp = new ArgsOp("ArgsOp");
 										 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= ID LPAR RPAR SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new CallOp("CallOp", new NodeLeaf("ID",SymbolTable.lookup(id).value.toString(), ""));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat ELSE Comp_stat 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int comps1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int comps1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node comps1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int comps2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comps2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node comps2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfThenElseOp("IfThenElseOp", expr, comps1, comps2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int compsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node comps = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfThenOp("IfThenOp", expr, comps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= WHILE LPAR Expr RPAR DO Comp_stat 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int compsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node comps = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileOp("WhileOp", expr, comps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ArgsA ::= Args 
            {
              Node RESULT =null;
		 nArgsOp.reverseList(); RESULT=nArgsOp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Args ::= Expr COMMA Args 
            {
              Node RESULT =null;
		int ExprArleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ExprArright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ExprAr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Args1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Args1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node Args1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
  	 
										nArgsOp.addNode(ExprAr);
										//RESULT = nArgsOp;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Args ::= Expr 
            {
              Node RESULT =null;
		int ExprArleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ExprArright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ExprAr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	
							nArgsOp.addNode(ExprAr);
							//RESULT = nArgsOp;
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Comp_stat ::= LGPAR StatementsA RGPAR 
            {
              Node RESULT =null;
		int Stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodeOp Stmts = (NodeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodeOp("CompStatOp", Stmts); 
											 //System.out.println("CompStatOP " +Stmts);
											 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comp_stat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= Expr Arith_op Expr 
            {
              Node RESULT =null;
		int ExprA1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ExprA1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ExprA1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ArOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ArOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ArOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ExprA2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ExprA2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ExprA2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 switch(ArOp){
													case "PLUS": RESULT = new MathOp("PlusOp", ExprA1, ExprA2);
														//System.out.println("Arit " +ExprA1+ " " + ExprA2);
														break;
													case "MINUS": RESULT = new MathOp("DiffOp", ExprA1, ExprA2);
														//System.out.println("Arit " +ExprA1+ " " + ExprA2);
														break;
													case "TIMES": RESULT = new MathOp("TimesOp", ExprA1, ExprA2);
														//System.out.println("Arit " +ExprA1+ " " + ExprA2);
														break;
													case "DIV": RESULT = new MathOp("DivOp", ExprA1, ExprA2);
														//System.out.println("Arit " +ExprA1+ " " + ExprA2);
														break;
														}
													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= Expr Bool_op Expr 
            {
              Node RESULT =null;
		int ExprB1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ExprB1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ExprB1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int BlOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int BlOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String BlOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ExprB2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ExprB2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ExprB2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 switch(BlOp){
													case "AND": RESULT = new MathOp("AndOp", ExprB1, ExprB2);
														//System.out.println("Bool " +ExprB1+ " " + ExprB2);
														break;
													case "OR": RESULT = new MathOp("OrOp", ExprB1, ExprB2);
														//System.out.println("Bool " +ExprB1+ " " + ExprB2);
														break;
														}
													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= Expr Rel_op Expr 
            {
              Node RESULT =null;
		int ExprR1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ExprR1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ExprR1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RlOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int RlOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String RlOp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ExprR2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ExprR2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ExprR2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 switch(RlOp){
													case "GT": RESULT = new MathOp("GTOp", ExprR1, ExprR2);
														//System.out.println("Relop " +ExprR1+ " " + ExprR2);
														break;
													case "GE": RESULT = new MathOp("GEOp", ExprR1, ExprR2);
														//System.out.println("Relop " +ExprR1+ " " + ExprR2);
														break;
													case "LT": RESULT = new MathOp("LTOp", ExprR1, ExprR2);
														//System.out.println("Relop " +ExprR1+ " " + ExprR2);
														break;	
													case "LE": RESULT = new MathOp("LEOp", ExprR1, ExprR2);
														//System.out.println("Relop " +ExprR1+ " " + ExprR2);
														break;														
													case "EQ": RESULT = new MathOp("EQOp", ExprR1, ExprR2);
														//System.out.println("Relop " +ExprR1+ " " + ExprR2);
														break;
														};
																									
												 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= OR 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= MINUS Expr 
            {
              Node RESULT =null;
		int ExprMleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ExprMright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ExprM = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOp("MinusOP", ExprM);
							//System.out.println("MinOP: " +ExprM); 
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= NOT Expr 
            {
              Node RESULT =null;
		int ExprNleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ExprNright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ExprN = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOp("NotOP", ExprN);
							//System.out.println("NotOP: " +ExprN); 
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= LPAR Expr RPAR 
            {
              Node RESULT =null;
		int ExprLRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ExprLRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ExprLR = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ExprLR;
							//System.out.println("ExprLR : " +ExprLR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= TRUE 
            {
              Node RESULT =null;
		 RESULT = new NodeLeaf("BOOL_CONST","TRUE", "BOOL_CONST"); 
							//System.out.println("True");
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= FALSE 
            {
              Node RESULT =null;
		 RESULT = new NodeLeaf("BOOL_CONST","FALSE", "BOOL_CONST"); 
							//System.out.println("False");
		 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLeaf("IDop",SymbolTable.lookup(id).value.toString(), ""); 
					//System.out.println("ID : " +SymbolTable.lookup(id).value.toString() + "  NumeroID:" +id ); 
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= INT_CONST 
            {
              Node RESULT =null;
		int iConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String iConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLeaf("INT_CONST",iConst, "INT_CONST"); 
						//System.out.println("INT_CONST : " +iConst); 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= DOUBLE_CONST 
            {
              Node RESULT =null;
		int dConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLeaf("DOUBLE_CONST",dConst, "DOUBLE_CONST"); 
							//System.out.println("INT_CONST : " +dConst); 
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= STRING_CONST 
            {
              Node RESULT =null;
		int sConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLeaf("STRING_CONST",sConst, "STRING_CONST"); 
							//System.out.println("INT_CONST : " +sConst); 
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= CHAR_CONST 
            {
              Node RESULT =null;
		int cConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodeLeaf("CHAR_CONST",cConst, "CHAR_CONST"); 
							//System.out.println("char_CONST : " +cConst); 
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Arith_op ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "PLUS"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Arith_op ::= MINUS 
            {
              String RESULT =null;
		RESULT = "MINUS"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Arith_op ::= TIMES 
            {
              String RESULT =null;
		RESULT = "TIMES"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Arith_op ::= DIV 
            {
              String RESULT =null;
		RESULT = "DIV"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Bool_op ::= AND 
            {
              String RESULT =null;
		 RESULT = "AND"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_op",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Bool_op ::= OR 
            {
              String RESULT =null;
		 RESULT = "OR"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_op",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Rel_op ::= GT 
            {
              String RESULT =null;
		 RESULT = "GT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Rel_op ::= GE 
            {
              String RESULT =null;
		 RESULT = "GE"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Rel_op ::= LT 
            {
              String RESULT =null;
		 RESULT = "LT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Rel_op ::= LE 
            {
              String RESULT =null;
		 RESULT = "LE"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Rel_op ::= EQ 
            {
              String RESULT =null;
		 RESULT = "EQ"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
