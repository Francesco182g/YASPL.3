head

int op1, op2;
int res;
int op;

def somma(in int op1, in int op2, out int res)
{
	res = op1 + op2;	
	
}

def sub(in int op1, in int op2, out int res)
{
	res = op1 - op2;
}

def mul(in int op1, in int op2, out int res)
{
	res = op1 * op2;
}

def mulSom(in int op1, in int op2, out int res)
{
	int i = 0.0;
	int risultato = 0;
	if((op2 == 0) or (op1 == 0))then{
	risultato = 0;
	}
	
	while((i < op2)) do{
	//"sono nel while"->;
		risultato = risultato + op1;
		i = i + 1;
	}
	
	res = risultato;
}


def divi(in int op1, in int op2, out int res)
{
	res = op1 / op2;
}


def elpot(in int op1, in int op2, out int res){
	int i = 0;
	int risu = 1;
	
	if(op2 == 0)then{
		res = 0;
	}

	if(op2 == 1)then{
	res = op1;
	}
	
	if(op2 > 1)then{
		while(not(i == op2)) do{
			risu = risu * op1;
			i = i + 1;
		}
	}
	
	res = risu;
	
	
}

def fibit(in int n, out int res){

	int i = 1;
	int risultato = 1;
 	int x = 0, y = 1, z = 1;
	
	if(n == 0)then{
		risultato = 0;
	}
	if(n == 1)then{
		risultato = 1;
	}else{
		x = n;
		while(not(i == n)) do{
			x = y;
            y = z;
            z = x + y;
			risultato = z;
			i = i + 1;	
		}
	}
	
	res = risultato;
}

start

"Inserisici il tipo di operazione: 1:Add 2:Sub 3:Mult 4:Div 5:Pot 6:Fib \n" ->;
op <-;


if(op == 1)then{
"Inserisci il primo operatore e il secondo: \n" ->;
op1, op2 <-;
	somma(op1, op2, res);
}
if(op == 2)then{
"Inserisci il primo operatore e il secondo: \n" ->;
op1, op2 <-;
	sub(op1, op2, res);
}
if(op == 3)then{
"Inserisci il primo operatore e il secondo: \n" ->;
op1, op2 <-;
	mulSom(op1, op2, res);
}
if(op == 4)then{
"Inserisci il primo operatore e il secondo: \n" ->;
op1, op2 <-;
	divi(op1, op2, res);
}
if(op == 5)then{
"Inserisci il primo operatore e il secondo: \n" ->;
op1, op2 <-;
	elpot(op1, op2, res);
}
if(op == 6)then{
"Inserisci il valore n di fibonacci: \n" ->;
op1 <-;
	fibit(op1, res);
}

"Stampo il risultato: ",res ->;

"Ciao"->;

